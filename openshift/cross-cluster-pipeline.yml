apiVersion: v1
kind: BuildConfig
metadata:
  name: product-catalog-cross-pipeline
  namespace: 
  labels:
    name: product-catalog-cross-pipeline
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "product-catalog", "namespace": "product-catalog-dev", "kind": "DeploymentConfig"}]'
spec:
  triggers:
    -
      type: GitHub
      github:
        secret: secret101
    -
      type: Generic
      generic:
        secret: secret101
  runPolicy: Serial
  source:
    type: Git
    git:
      uri: 'https://github.com/gnunn1/openshift-basic-pipeline'
      ref: master
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      env:
        - name: DEV_PROJECT
          value: product-catalog-dev
        - name: TEST_PROJECT
          value: product-catalog-test
      jenkinsfile: |-
        pipeline {
          agent any
          stages {

            stage ('Build Development') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.startBuild('product-catalog','--wait=true')
                    }
                  }
                }
              }
            }

            stage ('Deploy Development') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      def rm = openshift.selector("dc", "product-catalog").rollout()
                      rm.latest()
                      echo 'Waiting for rollout to complete'
                      rm.status()
                    }
                  }
                }
              }
            }

            stage('Smoke Test') {
              steps {
                script {
                  sh "curl -s --head --request GET http://product-catalog.product-catalog-dev:8080/health.php | grep '200 OK'"
                }
              }
            }

            stage('Promote to Test?') {
              steps {
                timeout(time:15, unit:'MINUTES') {
                    input message: "Promote to Test?", ok: "Promote"
                }
              }
            }

          }
        }
  output:
  resources:
  postCommit: